rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admin collection
    match /admin/{adminId} {
      allow read: if isAuthenticated() && request.auth.uid == adminId;
      allow write: if false;  // Admin documents should only be created through backend
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
      
      // Profile subcollection
      match /profile/{profileId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
      
      // Statistics subcollection
      match /statistics/{statId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
      
      // Activity subcollection
      match /activity/{activityId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }

      // Submissions subcollection
      match /submissions/{submissionId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
      
      // Route history subcollection
      match /routeHistory/{historyId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
      
      // Favorite routes subcollection
      match /favoriteRoutes/{favoriteId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
    }
    
    // Fares collection
    match /fares/{fareId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow users to update their own submissions
        request.auth.uid == resource.data.submitter.uid ||
        // Or if they are an admin
        isAdmin()
      );
      allow delete: if isAuthenticated() && isAdmin();

      // Rules for helpful subcollection
      match /helpful/{userId} {
        allow read: if isAuthenticated();
        allow create, update: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && (
          // Users can delete their own helpful marks
          request.auth.uid == userId ||
          // Admins can delete any helpful marks
          isAdmin()
        );
      }
    }
    
    // Routes collection
    match /routes/{routeId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Logs collection
    match /logs/{logId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if false;
    }
    
    // Support requests collection
    match /support_requests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }
  }
}